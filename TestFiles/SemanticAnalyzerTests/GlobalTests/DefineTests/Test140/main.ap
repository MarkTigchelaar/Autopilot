module main

define Option(int) as IntOption

define Result(int, someError) as IntResult

define Map(myStruct : string) as myStructMap

define HashMap(myStruct : int) as myStructHashMap


define Dictionary(bob : bob) as BobDictionary

define List(int) as IntList

define Vector(int) as IntVector

define LinkedList(int) as IntLinkedList

define Set(int) as IntSet

define HashSet(int) as IntHashSet

define TreeSet(int) as IntTreeSet

define Queue(int) as IntQueue

define FifoQueue(int) as IntFifoQueue

define Deque(int) as IntDeque

define PriorityQueue(int) as IntPriorityQueue

define Stack(int) as IntStack



// And for function definitions:
define fun(IntStack) int as IntStackFunc
define fun(IntStackFunc) IntStackFunc as AnotherIntStackFunc
define fun(
    IntOption,
    IntResult,
    myStructMap,
    myStructHashMap,
    BobDictionary,
    IntList,
    IntVector,
    IntLinkedList,
    IntSet,
    IntHashSet,
    IntTreeSet,
    IntQueue,
    IntQueue,
    IntQueue,
    IntFifoQueue,
    IntDeque,
    IntPriorityQueue,
    IntStack,
    AnotherIntStackFunc
) IntStack as EverythingBagelFunc


struct myStruct is
    a as string
end

interface bob is 
    fun myMethod() end
end

union someunion is
    a as int,
    b as string
end

enum myEnum is 
    a,
    b,
    c 
end

error someError is 
    a,
    b,
    c 
end

fun myFunction(a as int) int do 
    return a * 2
end

fun functionTwo(a as intFunction) intFunction do
    return a
end
